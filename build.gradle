import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'application'
    id "org.openjfx.javafxplugin" version "0.0.9"
}

group 'dev.pinter'
version '0.1'

targetCompatibility = 15

OperatingSystem OS = DefaultNativePlatform.currentOperatingSystem

ext.mainPackageName = "dev.pinter.jfxapp"
ext.distAppName = "JavaFXApp"
ext.appDescription = "JavaFX Application"
ext.moduleName = 'jfxapp.main'
ext.appAuthor = 'Flavio Freitas Pinter'


ext.javafxSdkDir = file(String.format("%s/sdk/javafx-sdk-%s-%s-%s", projectDir, targetCompatibility, OS.toFamilyName().toLowerCase(), System.getProperty("os.arch").toLowerCase()))
ext.javafxSdkBinDir = file("${javafxSdkDir}/bin");
ext.javafxSdkLibDir = file("${javafxSdkDir}/lib");

if (!file(javafxSdkDir).directory) {
    throw new GradleException(String.format("ERROR: openjfx-sdk for java %s (%s) not found in %s", targetCompatibility, System.getProperty("os.arch"), javafxSdkDir))
}
mainClassName = "${mainPackageName}.Main"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.13'
    implementation 'org.slf4j:slf4j-jdk14:1.7.30'
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'net.java.dev.jna:jna-platform:5.6.0'
}

javafx {
    version = targetCompatibility
    modules = ['javafx.fxml', 'javafx.controls']
}


ext.javahome = System.properties['java.home']


if (OS.windows) {
    ext.binjlink = javahome + "/bin/jlink.exe"
    ext.binjpackage = javahome + "/bin/jpackage.exe"
    ext.appImageIcon = "${projectDir}/src/main/resources/icon/java128.ico"
} else {
    ext.binjlink = javahome + "/bin/jlink"
    ext.binjpackage = javahome + "/bin/jpackage"
    ext.appImageIcon = "${projectDir}/src/main/resources/icon/java128.png"
}

jar {
    manifest {
        attributes('Class-Path': configurations.runtimeClasspath.collect { "lib" + File.separator + it.getName() }.join(' '),
                'Implementation-Title': distAppName,
                'Implementation-Version': project.version,
                'Automatic-Module-Name': moduleName,
                'Main-Class': mainClassName)
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

sourceSets {
    main {
        output.resourcesDir = main.java.outputDir
    }
}

task copyAppimageFiles(type: Copy) {
    dependsOn(jar)
    doFirst {
        mkdir "$buildDir/appimage-files"
    }
    from(configurations.runtimeClasspath.findAll {
        !it.getName().matches("javafx.*.jar")
    }).collect { it.getPath() }
    into "$buildDir/appimage-files"
}

task jlink(type: Exec) {
    dependsOn clean
    dependsOn build
    tasks.build.mustRunAfter(clean)
    dependsOn copyAppimageFiles
    dependsOn 'copyAppimageModules'
    workingDir buildDir

    doFirst {
        println "Using " + javafxSdkBinDir
    }

    commandLine binjlink,
            '-J-Djlink.debug=true',
            '--module-path', configurations.runtimeClasspath.collect { it }.join(File.pathSeparator) + File.pathSeparator + "${buildDir}/appimage-modules",
            '--add-modules', "${moduleName},javafx.base,javafx.fxml,javafx.graphics,javafx.controls,java.base,jdk.unsupported,java.logging",
            '--output', new File("${buildDir}", '/jre-image'),
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages',
            '--strip-native-commands'
}

task appimage(type: Exec) {
    dependsOn 'jlink'
    workingDir buildDir

    commandLine binjpackage,
            '--type', 'app-image',
            '--verbose',
            '--runtime-image', "${buildDir}/jre-image",
            '--module', "${moduleName}/${mainClassName}",
            '--dest', "${buildDir}/app-image",
            '--name', distAppName,
            '--icon', appImageIcon,
            '--app-version', project.version,
            '--vendor', appAuthor,
            '--input', "${buildDir}/appimage-files",
            '--description', appDescription,
            '--java-options',
            '-XX:+UseSerialGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=15 ' +
            "--add-reads ${moduleName}=ALL-UNNAMED"

    doLast {
        copy {
            if (OS.isWindows()) {
                from javafxSdkBinDir.listFiles().findAll {
                    it.getName() == "decora_sse.dll" ||
                            it.getName() == "fxplugins.dll" ||
                            it.getName() == "glass.dll" ||
                            it.getName() == "javafx_font.dll" ||
                            it.getName() == "javafx_iio.dll" ||
                            it.getName() == "prism_common.dll" ||
                            it.getName() == "prism_d3d.dll" ||
                            it.getName() == "prism_sw.dll"
                }.collect()
                into "$buildDir/app-image/${distAppName}"
            } else {
                from javafxSdkLibDir.listFiles().findAll {
                            it.getName() == "libdecora_sse.so" ||
                            it.getName() == "libfxplugins.so" ||
                            it.getName() == "libglass.so" ||
                            it.getName() == "libglassgtk2.so" ||
                            it.getName() == "libglassgtk3.so" ||
                            it.getName() == "libjavafx_font.so" ||
                            it.getName() == "libjavafx_font_freetype.so" ||
                            it.getName() == "libjavafx_font_pango.so" ||
                            it.getName() == "libjavafx_iio.so" ||
                            it.getName() == "libprism_common.so" ||
                            it.getName() == "libprism_es2.so" ||
                            it.getName() == "libprism_sw.so"
                }.collect()
                into "$buildDir/app-image/${distAppName}/lib"
            }
        }
        if (OS.isWindows()) {
            new File(buildDir, "app-image/${distAppName}/jfxwebkit.dll").delete()
            new File(buildDir, "app-image/${distAppName}/ucrtbase.dll").delete()
            new File(buildDir, "app-image/${distAppName}/gstreamer-lite.dll").delete()
            new File(buildDir, "app-image/${distAppName}/glib-lite.dll").delete()
        } else {
            new File("$buildDir/app-image/${distAppName}/lib").listFiles().findAll {
                        it.getName().startsWith("libavplugin-") ||
                        it.getName() == "libjfxwebkit.so" ||
                        it.getName() == "libgstreamer-lite.so" ||
                        it.getName() == "libjfxmedia.so"
            }.collect().findAll { println "delete " + it.getName() }
            println "Stripping debug info from native binaries"
            new File("$buildDir/app-image/${distAppName}").eachFileRecurse {
                if(!it.isFile()) {
                    return;
                }
                def cmd = ["strip",it.getAbsolutePath()]
                exec {
                    errorOutput = new ByteArrayOutputStream();
                    ignoreExitValue = true
                    commandLine(cmd)
                }
            }
        }
        new File(buildDir, "jre-image").deleteDir()
    }
}

task copyAppimageModules(type: Copy) {
    dependsOn(jar)
    doFirst {
        mkdir "$buildDir/appimage-modules"
    }
    from jar
    into "$buildDir/appimage-modules"
}

task archiveAppimage(type: Zip) {
    dependsOn 'appimage'
    from "${buildDir}/app-image"
    archiveFileName = "${distAppName}-${project.version}.zip"
    destinationDirectory = file("$buildDir")
}

run {
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
                '-XX:+UseSerialGC', '-XX:MinHeapFreeRatio=10', '-XX:MaxHeapFreeRatio=15',
                '--add-reads', "${moduleName}=ALL-UNNAMED",
                '--add-opens', 'javafx.base/com.sun.javafx.reflect=ALL-UNNAMED',
                '--add-opens', "${moduleName}/${mainPackageName}=ALL-UNNAMED",
                '--add-opens', "${moduleName}/${mainPackageName}.core=ALL-UNNAMED",
                '--add-opens', "${moduleName}/${mainPackageName}.gui=ALL-UNNAMED",
                '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                '--module-path', classpath.asPath,
                '--class-path', classpath.asPath,
                '--module', moduleName,
                '--patch-module', "$moduleName=" + files(sourceSets.main.output.resourcesDir).asPath,
        ]
        classpath = files()
    }
}